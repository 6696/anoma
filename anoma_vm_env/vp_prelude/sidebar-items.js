initSidebarItems({"attr":[["validity_predicate","This macro expects a function with signature:"]],"constant":[["BLOCK_HASH_LENGTH",""],["CHAIN_ID_LENGTH",""],["KEY_SEGMENT_SEPARATOR",""],["RESERVED_ADDRESS_PREFIX",""],["RESERVED_VP_KEY",""],["VP_KEY_PREFIX",""]],"derive":[["BorshDeserialize",""],["BorshSerialize",""]],"enum":[["Address",""],["DbKeySeg",""],["Error",""],["ImplicitAddress",""]],"fn":[["eval","Evaluate a validity predicate with given data. The address, changed storage keys and verifiers will have the same values as the input to caller’s validity predicate."],["get_block_hash","Get a block hash"],["get_block_height","Get the committed block height"],["get_chain_id","Get the chain ID"],["has_key_post","Check if the given key is present in storage after transaction execution."],["has_key_pre","Check if the given key was present in storage before transaction execution."],["iter_prefix_post","Get an iterator with the given prefix after transaction execution"],["iter_prefix_pre","Get an iterator with the given prefix before transaction execution"],["log_string","Log a string. The message will be printed at the `tracing::Level::Info`."],["read_post","Try to read a variable-length value at the given key from storage after transaction execution."],["read_pre","Try to read a variable-length value at the given key from storage before transaction execution."],["size_of","Returns the size of a type in bytes."],["verify_tx_signature","Verify a transaction signature. The signature is expected to have been produced on the data concatenated with the transaction code."]],"mod":[["address","Implements transparent addresses as described in Accounts Addresses."],["intent",""],["intent",""],["internal","Shared internal types between the host env and guest (wasm)."],["key",""],["key",""],["slice","Slice management and manipulation."],["token",""],["token","A basic fungible token"],["vm_memory","Memory types can be passed between the host and guest via wasm linear memory."]],"struct":[["BlockHash",""],["BlockHeight",""],["EstablishedAddress",""],["Key",""],["PostKeyValIterator",""],["PreKeyValIterator",""],["UpdateVp","A tx data type to update an account’s validity predicate"]],"trait":[["BorshDeserialize","A data-structure that can be de-serialized from binary format by NBOR."],["BorshSerialize","A data-structure that can be serialized into binary format by NBOR."],["KeySeg","Represents a segment in a path that may be used as a database key"]],"type":[["Result",""]]});